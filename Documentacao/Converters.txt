═══════════════════════════════════════════════════════════════════════════════
                            PASTA: CONVERTERS
═══════════════════════════════════════════════════════════════════════════════

📁 PARA QUE SERVE ESTA PASTA?
─────────────────────────────────────────────────────────────────────────────
A pasta "Converters" contém classes que convertem valores de um tipo para outro
tipo no WPF. Isso é muito útil quando você precisa transformar dados antes de
exibi-los na interface gráfica.

Por exemplo: converter TRUE/FALSE em VISÍVEL/OCULTO.

═══════════════════════════════════════════════════════════════════════════════


📄 ARQUIVO: BoolToVisibilityConverter.cs
─────────────────────────────────────────────────────────────────────────────

🎯 PARA QUE SERVE ESTE ARQUIVO?
Este arquivo converte valores booleanos (true/false) em valores de visibilidade
(Visible/Collapsed) para controlar se um elemento aparece ou não na tela.

Exemplo prático: Se você tem um botão que só deve aparecer quando algo está
selecionado, você usa este conversor.


📌 CLASSE: BoolToVisibilityConverter
─────────────────────────────────────────────────────────────────────────────
Herda de: IValueConverter (interface do WPF para conversores)

O que faz: Converte valores booleanos em valores de visibilidade.


🔧 MÉTODO: Convert
─────────────────────────────────────────────────────────────────────────────
Parâmetros:
  - value: O valor que será convertido (esperado: true ou false)
  - targetType: O tipo de destino (não usado aqui)
  - parameter: Parâmetro adicional (não usado aqui)
  - culture: Informações de cultura (não usado aqui)

Retorna: Visibility.Visible ou Visibility.Collapsed

O que faz:
  - Se o valor for TRUE → retorna Visibility.Visible (elemento aparece)
  - Se o valor for FALSE → retorna Visibility.Collapsed (elemento desaparece)

Exemplo de uso no XAML:
  Visibility="{Binding IsSelected, Converter={StaticResource BoolToVisibility}}"


🔧 MÉTODO: ConvertBack
─────────────────────────────────────────────────────────────────────────────
Parâmetros:
  - value: O valor de visibilidade
  - targetType: O tipo de destino
  - parameter: Parâmetro adicional
  - culture: Informações de cultura

Retorna: true ou false

O que faz:
  - Se o valor for Visibility.Visible → retorna TRUE
  - Caso contrário → retorna FALSE

Este método é usado quando você precisa fazer a conversão inversa (de
visibilidade para booleano).


═══════════════════════════════════════════════════════════════════════════════


📄 ARQUIVO: InverseBoolToVisibilityConverter.cs
─────────────────────────────────────────────────────────────────────────────

🎯 PARA QUE SERVE ESTE ARQUIVO?
Este arquivo faz o OPOSTO do BoolToVisibilityConverter. Ele converte valores
booleanos em visibilidade, mas de forma INVERTIDA.

Exemplo prático: Se você tem uma mensagem de erro que só deve aparecer quando
NÃO há dados selecionados, você usa este conversor.


📌 CLASSE: InverseBoolToVisibilityConverter
─────────────────────────────────────────────────────────────────────────────
Herda de: IValueConverter

O que faz: Converte valores booleanos em visibilidade de forma INVERTIDA.


🔧 MÉTODO: Convert
─────────────────────────────────────────────────────────────────────────────
Parâmetros:
  - value: O valor que será convertido (esperado: true ou false)
  - targetType: O tipo de destino (não usado aqui)
  - parameter: Parâmetro adicional (não usado aqui)
  - culture: Informações de cultura (não usado aqui)

Retorna: Visibility.Collapsed ou Visibility.Visible

O que faz:
  - Se o valor for TRUE → retorna Visibility.Collapsed (elemento DESAPARECE)
  - Se o valor for FALSE → retorna Visibility.Visible (elemento APARECE)

Exemplo de uso no XAML:
  Visibility="{Binding HasData, Converter={StaticResource InverseBoolToVisibility}}"


🔧 MÉTODO: ConvertBack
─────────────────────────────────────────────────────────────────────────────
Parâmetros:
  - value: O valor de visibilidade
  - targetType: O tipo de destino
  - parameter: Parâmetro adicional
  - culture: Informações de cultura

Retorna: true ou false

O que faz:
  - Se o valor for Visibility.Visible → retorna FALSE
  - Caso contrário → retorna TRUE

Este método faz a conversão inversa (de visibilidade para booleano invertido).


═══════════════════════════════════════════════════════════════════════════════
                            RESUMO DA PASTA
═══════════════════════════════════════════════════════════════════════════════

Os conversores são essenciais no WPF para transformar dados antes de exibi-los.
Eles permitem que você controle a aparência da interface baseado em valores
lógicos (true/false) sem precisar escrever código complexo no code-behind.

Pense nos conversores como "tradutores" que transformam a linguagem dos dados
(true/false) na linguagem da interface (visível/oculto).
