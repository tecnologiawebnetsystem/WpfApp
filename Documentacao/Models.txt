══════════════════════════════════════════════════════════════���════════════════
                            PASTA: MODELS
═══════════════════════════════════════════════════════════════════════════════

📁 PARA QUE SERVE ESTA PASTA?
─────────────────────────────────────────────────────────────────────────────
A pasta "Models" contém as classes que representam os dados da aplicação.
Estas classes são como "moldes" ou "formulários" que definem quais informações
cada entidade (pessoa, produto, pedido) deve ter.

Pense nos Models como a "estrutura" dos dados que você vai trabalhar.

═══════════════════════════════════════════════════════════════════════════════


📄 ARQUIVO: Pessoa.cs
─────────────────────────────────────────────────────────────────────────────

🎯 PARA QUE SERVE ESTE ARQUIVO?
Este arquivo define a estrutura de uma Pessoa no sistema. Ele diz quais
informações uma pessoa deve ter (nome, CPF, endereço, etc).


📌 CLASSE: Pessoa
─────────────────────────────────────────────────────────────────────────────
O que faz: Representa uma pessoa cadastrada no sistema.


🔧 PROPRIEDADE: Id (int)
─────────────────────────────────────────────────────────────────────────────
O que é: Número único que identifica cada pessoa no sistema.
Exemplo: 1, 2, 3, 4...

Por que existe: Para diferenciar pessoas com o mesmo nome. É como um RG interno
do sistema.


🔧 PROPRIEDADE: Nome (string)
─────────────────────────────────────────────────────────────────────────────
O que é: Nome completo da pessoa.
Exemplo: "João Silva", "Maria Santos"


🔧 PROPRIEDADE: Cpf (string)
─────────────────────────────────────────────────────────────────────────────
O que é: CPF da pessoa no formato 000.000.000-00.
Exemplo: "123.456.789-00"

Validação: O sistema verifica se o CPF é válido usando o algoritmo oficial.


🔧 PROPRIEDADE: Email (string)
─────────────────────────────────────────────────────────────────────────────
O que é: Endereço de e-mail da pessoa.
Exemplo: "joao@email.com"

Validação: O sistema verifica se o e-mail tem formato válido (tem @ e domínio).


🔧 PROPRIEDADE: Telefone (string)
─────────────────────────────────────────────────────────────────────────────
O que é: Número de telefone da pessoa.
Exemplo: "(11) 98765-4321"


🔧 PROPRIEDADE: Cep (string)
─────────────────────────────────────────────────────────────────────────────
O que é: CEP do endereço da pessoa.
Exemplo: "01310-100"

Funcionalidade especial: Quando você digita o CEP, o sistema busca
automaticamente o endereço completo na internet (API ViaCEP).


🔧 PROPRIEDADE: Logradouro (string)
─────────────────────────────────────────────────────────────────────────────
O que é: Nome da rua, avenida, etc.
Exemplo: "Avenida Paulista", "Rua das Flores"

Preenchimento: Automático quando você busca o CEP.


🔧 PROPRIEDADE: Numero (string)
─────────────────────────────────────────────────────────────────────────────
O que é: Número da casa/prédio.
Exemplo: "1000", "S/N"


🔧 PROPRIEDADE: Complemento (string)
─────────────────────────────────────────────────────────────────────────────
O que é: Informações adicionais do endereço.
Exemplo: "Apto 101", "Bloco B", "Casa 2"


🔧 PROPRIEDADE: Bairro (string)
─────────────────────────────────────────────────────────────────────────────
O que é: Nome do bairro.
Exemplo: "Bela Vista", "Centro"

Preenchimento: Automático quando você busca o CEP.


🔧 PROPRIEDADE: Cidade (string)
─────────────────────────────────────────────────────────────────────────────
O que é: Nome da cidade.
Exemplo: "São Paulo", "Rio de Janeiro"

Preenchimento: Automático quando você busca o CEP.


🔧 PROPRIEDADE: Estado (string)
─────────────────────────────────────────────────────────────────────────────
O que é: Sigla do estado (UF).
Exemplo: "SP", "RJ", "MG"

Preenchimento: Automático quando você busca o CEP.


═══════════════════════════════════════════════════════════════════════════════


📄 ARQUIVO: Produto.cs
─────────────────────────────────────────────────────────────────────────────

🎯 PARA QUE SERVE ESTE ARQUIVO?
Este arquivo define a estrutura de um Produto no sistema. Ele diz quais
informações um produto deve ter (nome, preço, estoque, etc).


📌 CLASSE: Produto
─────────────────────────────────────────────────────────────────────────────
O que faz: Representa um produto cadastrado no sistema.


🔧 PROPRIEDADE: Id (int)
─────────────────────────────────────────────────────────────────────────────
O que é: Número único que identifica cada produto no sistema.
Exemplo: 1, 2, 3, 4...


🔧 PROPRIEDADE: Nome (string)
─────────────────────────────────────────────────────────────────────────────
O que é: Nome do produto.
Exemplo: "Notebook Dell", "Mouse Logitech"


🔧 PROPRIEDADE: Descricao (string)
─────────────────────────────────────────────────────────────────────────────
O que é: Descrição detalhada do produto.
Exemplo: "Notebook Dell Inspiron 15, 8GB RAM, 256GB SSD, Tela 15.6 polegadas"


🔧 PROPRIEDADE: Preco (decimal)
─────────────────────────────────────────────────────────────────────────────
O que é: Preço do produto em reais.
Exemplo: 3500.00, 150.50

Tipo decimal: Usado para valores monetários porque mantém precisão nas casas
decimais (evita erros de arredondamento).


🔧 PROPRIEDADE: Estoque (int)
─────────────────────────────────────────────────────────────────────────────
O que é: Quantidade disponível em estoque.
Exemplo: 10, 50, 0

Funcionalidade: Quando você cria um pedido, o estoque é reduzido
automaticamente.


═══════════════════════════════════════════════════════════════════════════════


📄 ARQUIVO: Pedido.cs
─────────────────────────────────────────────────────────────────────────────

🎯 PARA QUE SERVE ESTE ARQUIVO?
Este arquivo define a estrutura de um Pedido no sistema. Um pedido é composto
por um cliente, uma lista de produtos e o valor total.


📌 CLASSE: Pedido
─────────────────────────────────────────────────────────────────────────────
O que faz: Representa um pedido realizado no sistema.


🔧 PROPRIEDADE: Id (int)
─────────────────────────────────────────────────────────────────────────────
O que é: Número único que identifica cada pedido no sistema.
Exemplo: 1, 2, 3, 4...


🔧 PROPRIEDADE: Data (DateTime)
─────────────────────────────────────────────────────────────────────────────
O que é: Data e hora em que o pedido foi criado.
Exemplo: 15/01/2025 10:30:00

Preenchimento: Automático quando você cria um pedido (usa a data/hora atual).


🔧 PROPRIEDADE: Cliente (Pessoa)
─────────────────────────────────────────────────────────────────────────────
O que é: A pessoa que está fazendo o pedido.
Tipo: Objeto do tipo Pessoa (contém todos os dados do cliente)

Relacionamento: Um pedido pertence a UMA pessoa.


🔧 PROPRIEDADE: Itens (List<PedidoItem>)
─────────────────────────────────────────────────────────────────────────────
O que é: Lista de produtos incluídos no pedido.
Tipo: Lista de objetos PedidoItem

Exemplo: Um pedido pode ter 2 notebooks, 1 mouse e 3 teclados.


🔧 PROPRIEDADE: ValorTotal (decimal)
─────────────────────────────────────────────────────────────────────────────
O que é: Valor total do pedido (soma de todos os itens).
Exemplo: 7500.00

Cálculo: Soma de (quantidade × preço unitário) de cada item.


📌 CLASSE: PedidoItem
─────────────────────────────────────────────────────────────────────────────
O que faz: Representa um item dentro de um pedido (um produto + quantidade).


🔧 PROPRIEDADE: Produto (Produto)
─────────────────────────────────────────────────────────────────────────────
O que é: O produto que está sendo pedido.
Tipo: Objeto do tipo Produto


🔧 PROPRIEDADE: Quantidade (int)
─────────────────────────────────────────────────────────────────────────────
O que é: Quantas unidades deste produto estão sendo pedidas.
Exemplo: 1, 2, 5, 10


🔧 PROPRIEDADE: PrecoUnitario (decimal)
─────────────────────────────────────────────────────────────────────────────
O que é: Preço de uma unidade do produto no momento do pedido.
Exemplo: 3500.00

Por que guardar: O preço do produto pode mudar no futuro, mas o pedido deve
manter o preço que estava no momento da compra.


🔧 PROPRIEDADE: Subtotal (decimal)
─────────────────────────────────────────────────────────────────────────────
O que é: Valor total deste item (quantidade × preço unitário).
Exemplo: Se comprou 2 notebooks a R$ 3500,00 cada, o subtotal é R$ 7000,00

Cálculo: Quantidade × PrecoUnitario


═══════════════════════════════════════════════════════════════════════════════
                            RESUMO DA PASTA
═══════════════════════════════════════════════════════════════════════════════

Os Models são a "espinha dorsal" da aplicação. Eles definem COMO os dados são
estruturados e QUAIS informações cada entidade deve ter.

Relacionamentos:
  - Uma PESSOA pode fazer vários PEDIDOS
  - Um PEDIDO pertence a UMA PESSOA
  - Um PEDIDO pode ter vários PRODUTOS (através de PedidoItem)
  - Um PRODUTO pode estar em vários PEDIDOS

Pense nos Models como formulários em branco que você vai preencher com dados
reais quando usar o sistema.
