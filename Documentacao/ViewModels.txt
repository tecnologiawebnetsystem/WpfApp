═══════════════════════════════════════════════════════════════════════════════
                            PASTA: VIEWMODELS
═══════════════════════════════════════════════════════════════════════════════

📁 PARA QUE SERVE ESTA PASTA?
─────────────────────────────────────────────────────────────────────────────
A pasta "ViewModels" contém a LÓGICA DE NEGÓCIO da aplicação. Os ViewModels
são a "ponte" entre a interface (Views) e os dados (Models).

Eles são responsáveis por:
  - Gerenciar os dados que aparecem na tela
  - Executar ações quando o usuário clica em botões
  - Validar informações
  - Chamar os serviços (DataService, CepService, etc)

Pense nos ViewModels como o "cérebro" de cada tela da aplicação.

═══════════════════════════════════════════════════════════════════════════════


📄 ARQUIVO: BaseViewModel.cs
─────────────────────────────────────────────────────────────────────────────

🎯 PARA QUE SERVE ESTE ARQUIVO?
Este arquivo contém a classe base que TODOS os outros ViewModels herdam. Ele
implementa o padrão INotifyPropertyChanged, que permite que a interface seja
atualizada automaticamente quando os dados mudam.


📌 CLASSE: BaseViewModel
─────────────────────────────────────────────────────────────────────────────
Herda de: INotifyPropertyChanged

O que faz: Fornece funcionalidade básica para notificar a interface sobre
mudanças nos dados.


🔧 EVENTO: PropertyChanged
─────────────────────────────────────────────────────────────────────────────
O que é: Evento que é disparado quando uma propriedade muda.

Como funciona: Quando você muda o valor de uma propriedade, este evento avisa
a interface para atualizar o que está sendo exibido.


🔧 MÉTODO: OnPropertyChanged(string propertyName)
─────────────────────────────────────────────────────────────────────────────
Parâmetros:
  - propertyName: Nome da propriedade que mudou (opcional)

O que faz: Dispara o evento PropertyChanged para notificar a interface.

Exemplo de uso:
  private string _nome;
  public string Nome
  {
      get => _nome;
      set
      {
          _nome = value;
          OnPropertyChanged(); // Avisa a interface que Nome mudou
      }
  }


🔧 MÉTODO: SetProperty<T>(ref T field, T value, string propertyName)
─────────────────────────────────────────────────────────────────────────────
Parâmetros:
  - field: Campo que armazena o valor (passado por referência)
  - value: Novo valor
  - propertyName: Nome da propriedade (opcional)

Retorna: true se o valor mudou, false se permaneceu igual

O que faz:
  1. Compara o valor atual com o novo valor
  2. Se forem diferentes:
     - Atualiza o campo
     - Dispara OnPropertyChanged
     - Retorna true
  3. Se forem iguais:
     - Não faz nada
     - Retorna false

Exemplo de uso:
  private string _nome;
  public string Nome
  {
      get => _nome;
      set => SetProperty(ref _nome, value);
  }


═══════════════════════════════════════════════════════════════════════════════


📄 ARQUIVO: RelayCommand.cs
─────────────────────────────────────────────────────────────────────────────

🎯 PARA QUE SERVE ESTE ARQUIVO?
Este arquivo implementa o padrão Command do WPF. Commands são usados para
conectar botões e outros controles a métodos nos ViewModels.


📌 CLASSE: RelayCommand
─────────────────────────────────────────────────────────────────────────────
Herda de: ICommand

O que faz: Permite que você execute métodos quando o usuário clica em botões.


🔧 CAMPO: _execute (Action<object>)
─────────────────────────────────────────────────────────────────────────────
O que é: Método que será executado quando o comando for acionado.


🔧 CAMPO: _canExecute (Func<object, bool>)
─────────────────────────────────────────────────────────────────────────────
O que é: Método que determina se o comando pode ser executado.

Exemplo: Um botão "Salvar" só deve estar habilitado se todos os campos
obrigatórios estiverem preenchidos.


🔧 CONSTRUTOR: RelayCommand(Action<object> execute, Func<object, bool> canExecute)
─────────────────────────────────────────────────────────────────────────────
Parâmetros:
  - execute: Método a ser executado
  - canExecute: Método que verifica se pode executar (opcional)

O que faz: Inicializa o comando com os métodos fornecidos.


🔧 MÉTODO: CanExecute(object parameter)
─────────────────────────────────────────────────────────────────────────────
Parâmetros:
  - parameter: Parâmetro opcional

Retorna: true se o comando pode ser executado, false caso contrário

O que faz:
  - Se _canExecute foi fornecido, chama ele e retorna o resultado
  - Se não foi fornecido, sempre retorna true


🔧 MÉTODO: Execute(object parameter)
─────────────────────────────────────────────────────────────────────────────
Parâmetros:
  - parameter: Parâmetro opcional

O que faz: Executa o método _execute.


🔧 MÉTODO: RaiseCanExecuteChanged()
─────────────────────────────────────────────────────────────────────────────
O que faz: Força uma reavaliação de CanExecute.

Quando usar: Quando algo muda e você quer que o WPF verifique novamente se o
comando pode ser executado (para habilitar/desabilitar botões).


═══════════════════════════════════════════════════════════════════════════════


📄 ARQUIVO: PessoasViewModel.cs
─────────────────────────────────────────────────────────────────────────────

🎯 PARA QUE SERVE ESTE ARQUIVO?
Este arquivo gerencia toda a lógica da tela de cadastro de pessoas. Ele
controla a lista de pessoas, adiciona, edita, exclui e busca CEP.


📌 CLASSE: PessoasViewModel
─────────────────────────────────────────────────────────────────────────────
Herda de: BaseViewModel

O que faz: Gerencia o cadastro de pessoas.


🔧 PROPRIEDADE: Pessoas (ObservableCollection<Pessoa>)
─────────────────────────────────────────────────────────────────────────────
O que é: Lista de todas as pessoas cadastradas.

Tipo especial: ObservableCollection notifica automaticamente a interface quando
itens são adicionados, removidos ou modificados.


🔧 PROPRIEDADE: PessoaSelecionada (Pessoa)
─────────────────────────────────────────────────────────────────────────────
O que é: Pessoa atualmente selecionada na tabela.

Quando muda: Quando o usuário clica em uma linha da tabela.


🔧 PROPRIEDADE: NovaPessoa (Pessoa)
─────────────────────────────────────────────────────────────────────────────
O que é: Objeto que armazena os dados do formulário de cadastro.


🔧 PROPRIEDADE: ModoEdicao (bool)
─────────────────────────────────────────────────────────────────────────────
O que é: Indica se está editando (true) ou adicionando (false) uma pessoa.


🔧 PROPRIEDADE: BuscandoCep (bool)
─────────────────────────────────────────────────────────────────────────────
O que é: Indica se está buscando o CEP na internet.

Uso: Mostra um indicador de carregamento enquanto busca.


🔧 COMANDO: AdicionarCommand
─────────────────────────────────────────────────────────────────────────────
O que faz: Adiciona uma nova pessoa ao sistema.

Fluxo:
  1. Valida os dados usando ValidationService
  2. Se inválido, mostra mensagem de erro
  3. Se válido:
     - Gera um novo Id
     - Adiciona à lista Pessoas
     - Salva no arquivo usando DataService
     - Limpa o formulário


🔧 COMANDO: EditarCommand
─────────────────────────────────────────────────────────────────────────────
O que faz: Prepara o formulário para editar uma pessoa existente.

Fluxo:
  1. Verifica se há uma pessoa selecionada
  2. Copia os dados da pessoa selecionada para NovaPessoa
  3. Ativa o modo de edição (ModoEdicao = true)


🔧 COMANDO: SalvarEdicaoCommand
─────────────────────────────────────────────────────────────────────────────
O que faz: Salva as alterações de uma pessoa editada.

Fluxo:
  1. Valida os dados
  2. Se inválido, mostra mensagem de erro
  3. Se válido:
     - Atualiza os dados da pessoa na lista
     - Salva no arquivo
     - Desativa o modo de edição
     - Limpa o formulário


🔧 COMANDO: CancelarEdicaoCommand
─────────────────────────────────────────────────────────────────────────────
O que faz: Cancela a edição e limpa o formulário.


🔧 COMANDO: ExcluirCommand
─────────────────────────────────────────────────────────────────────────────
O que faz: Exclui uma pessoa do sistema.

Fluxo:
  1. Verifica se há uma pessoa selecionada
  2. Pede confirmação ao usuário
  3. Se confirmado:
     - Remove da lista Pessoas
     - Salva no arquivo
     - Limpa a seleção


🔧 COMANDO: BuscarCepCommand
─────────────────────────────────────────────────────────────────────────────
O que faz: Busca o endereço na internet usando o CEP.

Fluxo:
  1. Ativa o indicador de carregamento (BuscandoCep = true)
  2. Chama CepService.BuscarEnderecoPorCepAsync()
  3. Se encontrou:
     - Preenche automaticamente Logradouro, Bairro, Cidade, Estado
  4. Se não encontrou:
     - Mostra mensagem de erro
  5. Desativa o indicador de carregamento


🔧 MÉTODO: LimparFormulario()
─────────────────────────────────────────────────────────────────────────────
O que faz: Limpa todos os campos do formulário.


🔧 MÉTODO: CarregarPessoas()
─────────────────────────────────────────────────────────────────────────────
O que faz: Carrega as pessoas do arquivo ao iniciar o sistema.


═══════════════════════════════════════════════════════════════════════════════


📄 ARQUIVO: ProdutosViewModel.cs
─────────────────────────────────────────────────────────────────────────────

🎯 PARA QUE SERVE ESTE ARQUIVO?
Este arquivo gerencia toda a lógica da tela de cadastro de produtos.


📌 CLASSE: ProdutosViewModel
─────────────────────────────────────────────────────────────────────────────
Herda de: BaseViewModel

O que faz: Gerencia o cadastro de produtos.


🔧 PROPRIEDADE: Produtos (ObservableCollection<Produto>)
─────────────────────────────────────────────────────────────────────────────
O que é: Lista de todos os produtos cadastrados.


🔧 PROPRIEDADE: ProdutoSelecionado (Produto)
─────────────────────────────────────────────────────────────────────────────
O que é: Produto atualmente selecionado na tabela.


🔧 PROPRIEDADE: NovoProduto (Produto)
─────────────────────────────────────────────────────────────────────────────
O que é: Objeto que armazena os dados do formulário de cadastro.


🔧 PROPRIEDADE: ModoEdicao (bool)
─────────────────────────────────────────────────────────────────────────────
O que é: Indica se está editando ou adicionando um produto.


🔧 COMANDO: AdicionarCommand
─────────────────────────────────────────────────────────────────────────────
O que faz: Adiciona um novo produto ao sistema.

Fluxo similar ao PessoasViewModel.AdicionarCommand.


🔧 COMANDO: EditarCommand
─────────────────────────────────────────────────────────────────────────────
O que faz: Prepara o formulário para editar um produto existente.


🔧 COMANDO: SalvarEdicaoCommand
─────────────────────────────────────────────────────────────────────────────
O que faz: Salva as alterações de um produto editado.


🔧 COMANDO: CancelarEdicaoCommand
───────────────────────────────────���─────────────────────────────────────────
O que faz: Cancela a edição e limpa o formulário.


🔧 COMANDO: ExcluirCommand
─────────────────────────────────────────────────────────────────────────────
O que faz: Exclui um produto do sistema.


═══════════════════════════════════════════════════════════════════════════════


📄 ARQUIVO: PedidosViewModel.cs
─────────────────────────────────────────────────────────────────────────────

🎯 PARA QUE SERVE ESTE ARQUIVO?
Este arquivo gerencia a listagem de pedidos realizados.


📌 CLASSE: PedidosViewModel
─────────────────────────────────────────────────────────────────────────────
Herda de: BaseViewModel

O que faz: Gerencia a lista de pedidos.


🔧 PROPRIEDADE: Pedidos (ObservableCollection<Pedido>)
─────────────────────────────────────────────────────────────────────────────
O que é: Lista de todos os pedidos realizados.


🔧 PROPRIEDADE: PedidoSelecionado (Pedido)
─────────────────────────────────────────────────────────────────────────────
O que é: Pedido atualmente selecionado na tabela.


🔧 COMANDO: NovoPedidoCommand
─────────────────────────────────────────────────────────────────────────────
O que faz: Abre a janela para criar um novo pedido.

Fluxo:
  1. Abre a janela PedidoWindow
  2. Quando a janela é fechada, recarrega a lista de pedidos


🔧 COMANDO: ExcluirCommand
─────────────────────────────────────────────────────────────────────────────
O que faz: Exclui um pedido do sistema.

Fluxo:
  1. Verifica se há um pedido selecionado
  2. Pede confirmação
  3. Se confirmado:
     - Remove da lista
     - Salva no arquivo


🔧 MÉTODO: CarregarPedidos()
─────────────────────────────────────────────────────────────────────────────
O que faz: Carrega os pedidos do arquivo.


═══════════════════════════════════════════════════════════════════════════════


📄 ARQUIVO: PedidoViewModel.cs
─────────────────────────────────────────────────────────────────────────────

🎯 PARA QUE SERVE ESTE ARQUIVO?
Este arquivo gerencia a criação de um novo pedido.


📌 CLASSE: PedidoViewModel
─────────────────────────────────────────────────────────────────────────────
Herda de: BaseViewModel

O que faz: Gerencia a criação de pedidos.


🔧 PROPRIEDADE: Pessoas (ObservableCollection<Pessoa>)
─────────────────────────────────────────────────────────────────────────────
O que é: Lista de pessoas disponíveis para selecionar como cliente.


🔧 PROPRIEDADE: Produtos (ObservableCollection<Produto>)
─────────────────────────────────────────────────────────────────────────────
O que é: Lista de produtos disponíveis para adicionar ao pedido.


🔧 PROPRIEDADE: ClienteSelecionado (Pessoa)
─────────────────────────────────────────────────────────────────────────────
O que é: Cliente escolhido para o pedido.


🔧 PROPRIEDADE: ProdutoSelecionado (Produto)
─────────────────────────────────────────────────────────────────────────────
O que é: Produto escolhido para adicionar ao pedido.


🔧 PROPRIEDADE: Quantidade (int)
─────────────────────────────────────────────────────────────────────────────
O que é: Quantidade do produto a ser adicionada.


🔧 PROPRIEDADE: ItensPedido (ObservableCollection<PedidoItem>)
─────────────────────────────────────────────────────────────────────────────
O que é: Lista de itens adicionados ao pedido.


🔧 PROPRIEDADE: ValorTotal (decimal)
─────────────────────────────────────────────────────────────────────────────
O que é: Valor total do pedido (calculado automaticamente).


🔧 COMANDO: AdicionarItemCommand
─────────────────────────────────────────────────────────────────────────────
O que faz: Adiciona um produto ao pedido.

Fluxo:
  1. Verifica se há produto e quantidade selecionados
  2. Verifica se há estoque suficiente
  3. Cria um PedidoItem
  4. Adiciona à lista ItensPedido
  5. Recalcula o ValorTotal


🔧 COMANDO: RemoverItemCommand
─────────────────────────────────────────────────────────────────────────────
O que faz: Remove um item do pedido.


🔧 COMANDO: FinalizarPedidoCommand
─────────────────────────────────────────────────────────────────────────────
O que faz: Finaliza e salva o pedido.

Fluxo:
  1. Verifica se há cliente selecionado
  2. Verifica se há itens no pedido
  3. Cria o objeto Pedido
  4. Atualiza o estoque dos produtos
  5. Salva o pedido no arquivo
  6. Fecha a janela


🔧 MÉTODO: CalcularValorTotal()
─────────────────────────────────────────────────────────────────────────────
O que faz: Soma o subtotal de todos os itens do pedido.


═══════════════════════════════════════════════════════════════════════════════
                            RESUMO DA PASTA
═══════════════════════════════════════════════════════════════════════════════

Os ViewModels são o "cérebro" da aplicação. Eles implementam o padrão MVVM
(Model-View-ViewModel), que separa a lógica da interface.

Vantagens do padrão MVVM:
  ✓ Separação de responsabilidades (lógica separada da interface)
  ✓ Testabilidade (pode testar a lógica sem abrir a interface)
  ✓ Reutilização (mesma lógica pode ser usada em diferentes interfaces)
  ✓ Manutenibilidade (código mais organizado e fácil de manter)

Hierarquia:
  - BaseViewModel: Classe base com funcionalidade comum
  - RelayCommand: Implementação de comandos
  - ViewModels específicos: PessoasViewModel, ProdutosViewModel, etc.

Cada ViewModel é responsável por UMA tela e gerencia:
  - Dados exibidos
  - Ações do usuário (comandos)
  - Validações
  - Chamadas aos serviços
