═══════════════════════════════════════════════════════════════════════════════
                            PASTA: VIEWS
═══════════════════════════════════════════════════════════════════════════════

📁 PARA QUE SERVE ESTA PASTA?
─────────────────────────────────────────────────────────────────────────────
A pasta "Views" contém as INTERFACES GRÁFICAS da aplicação. São as janelas e
telas que o usuário vê e interage.

Cada View é composta por dois arquivos:
  - .xaml: Define a aparência (layout, cores, botões, campos)
  - .xaml.cs: Código C# que conecta a interface ao ViewModel

Pense nas Views como a "cara" da aplicação, o que o usuário vê e toca.

═══════════════════════════════════════════════════════════════════════════════


📄 ARQUIVOS: MainWindow.xaml e MainWindow.xaml.cs
─────────────────────────────────────────────────────────────────────────────

🎯 PARA QUE SERVEM ESTES ARQUIVOS?
Estes arquivos definem a JANELA PRINCIPAL da aplicação. É a primeira tela que
aparece quando você abre o sistema.


📌 ARQUIVO: MainWindow.xaml
─────────────────────────────────────────────────────────────────────────────

🔧 ESTRUTURA GERAL
─────────────────────────────────────────────────────────────────────────────
A janela principal é dividida em 4 áreas:

1. TOPO: Barra com título "Gestão Profissional Benner" e seletor de formato (XML/JSON)
2. ESQUERDA: Menu lateral com botões de navegação (Home, Pessoas, Produtos, Pedidos)
3. CENTRO: Área de conteúdo com abas
4. RODAPÉ: Links institucionais (Website, LinkedIn, Instagram)


🔧 SEÇÃO: Barra Superior
─────────────────────────────────────────────────────────────────────────────
Elementos:
  - Botão "☰": Recolhe/expande o menu lateral
  - Título: "Gestão Profissional Benner"
  - ComboBox: Seletor de formato de dados (XML ou JSON)
  - Botão de notificações (sino)
  - Botão de perfil (ícone de usuário)

Funcionalidade:
  - Quando você muda o formato, o sistema passa a salvar naquele formato
  - A escolha é salva no App.config


🔧 SEÇÃO: Menu Lateral
─────────────────────────────────────────────────────────────────────────────
Elementos:
  - Texto "MENU" (visível quando expandido)
  - Botão "🏠 Home": Volta para o Dashboard
  - Botão "👥 Pessoas": Vai para a aba de pessoas
  - Botão "📦 Produtos": Vai para a aba de produtos
  - Botão "🛒 Pedidos": Vai para a aba de pedidos

Funcionalidade:
  - Menu pode ser recolhido para dar mais espaço ao conteúdo
  - Quando recolhido, mostra apenas os ícones
  - Quando expandido, mostra ícones + texto
  - Ordem dos itens: Home, Pessoas, Produtos, Pedidos


🔧 SEÇÃO: Rodapé
─────────────────────────────────────────────────────────────────────────────
Elementos:
  - Website: www.benner.com.br
  - LinkedIn: /companyuniversobenner
  - Instagram: /companyuniversobenner

Estilo:
  - Texto branco em negrito
  - Tamanho de fonte: 15px
  - Separados por barras verticais (|)
  - Centralizados horizontalmente


📌 ARQUIVO: MainWindow.xaml.cs
─────────────────────────────────────────────────────────────────────────────

🔧 MÉTODO: VoltarDashboard()
─────────────────────────────────────────────────────────────────────────────
Quando é chamado: Quando o usuário clica no botão "Home" do menu lateral.

O que faz:
  - Fecha todas as abas abertas (exceto a Dashboard)
  - Volta para a aba inicial (Dashboard)
  - Pode ser chamado por outras janelas para retornar ao início


🔧 MÉTODO: HomeButton_Click
─────────────────────────────────────────────────────────────────────────────
Quando é chamado: Quando o usuário clica no botão "Home".

O que faz:
  - Chama o método VoltarDashboard()


═══════════════════════════════════════════════════════════════════════════════


📄 ARQUIVOS: PessoasWindow.xaml e PessoasWindow.xaml.cs
─────────────────────────────────────────────────────────────────────────────

🎯 PARA QUE SERVEM ESTES ARQUIVOS?
Estes arquivos definem a tela de CADASTRO DE PESSOAS.


📌 ARQUIVO: PessoasWindow.xaml
─────────────────────────────────────────────────────────────────────────────

🔧 ESTRUTURA GERAL
─────────────────────────────────────────────────────────────────────────────
A tela é dividida em 2 áreas:

1. TOPO: Formulário de cadastro
2. BAIXO: Tabela com lista de pessoas


🔧 SEÇÃO: Formulário de Cadastro
─────────────────────────────────────────────────────────────────────────────
Campos:
  - Nome (obrigatório)
  - CPF (obrigatório, validado)
  - Email (obrigatório, validado)
  - Telefone (obrigatório, validado)
  - CEP (obrigatório, com botão de busca)
  - Logradouro (preenchido automaticamente)
  - Número
  - Complemento
  - Bairro (preenchido automaticamente)
  - Cidade (preenchido automaticamente)
  - Estado (preenchido automaticamente)

Botões:
  - "Buscar CEP": Busca o endereço na internet
  - "Adicionar": Adiciona uma nova pessoa (visível quando não está editando)
  - "Salvar": Salva as alterações (visível quando está editando)
  - "Cancelar": Cancela a edição (visível quando está editando)

Binding:
  - Todos os campos estão conectados a NovaPessoa no ViewModel
  - Os botões estão conectados aos comandos do ViewModel


🔧 SEÇÃO: Tabela de Pessoas
─────────────────────────────────────────────────────────────────────────────
Colunas:
  - Id
  - Nome
  - CPF
  - Email
  - Telefone
  - Cidade
  - Estado

Botões:
  - "Editar": Carrega os dados da pessoa no formulário
  - "Excluir": Remove a pessoa do sistema

Binding:
  - A tabela está conectada à lista Pessoas no ViewModel
  - A linha selecionada está conectada a PessoaSelecionada


📌 ARQUIVO: PessoasWindow.xaml.cs
─────────────────────────────────────────────────────────────────────────────

🔧 CONSTRUTOR: PessoasWindow()
─────────────────────────────────────────────────────────────────────────────
O que faz:
  1. Inicializa os componentes da interface
  2. Cria uma instância de PessoasViewModel
  3. Define o ViewModel como DataContext (conecta a interface ao ViewModel)


═══════════════════════════════════════════════════════════════════════════════


📄 ARQUIVOS: ProdutosWindow.xaml e ProdutosWindow.xaml.cs
─────────────────────────────────────────────────────────────────────────────

🎯 PARA QUE SERVEM ESTES ARQUIVOS?
Estes arquivos definem a tela de CADASTRO DE PRODUTOS.


📌 ARQUIVO: ProdutosWindow.xaml
─────────────────────────────────────────────────────────────────────────────

🔧 ESTRUTURA GERAL
─────────────────────────────────────────────────────────────────────────────
Similar à tela de pessoas, dividida em formulário e tabela.


🔧 SEÇÃO: Formulário de Cadastro
─────────────────────────────────────────────────────────────────────────────
Campos:
  - Nome (obrigatório)
  - Descrição
  - Preço (obrigatório, maior que zero)
  - Estoque (obrigatório, maior ou igual a zero)

Botões:
  - "Adicionar": Adiciona um novo produto
  - "Salvar": Salva as alterações
  - "Cancelar": Cancela a edição


🔧 SEÇÃO: Tabela de Produtos
─────────────────────────────────────────────────────────────────────────────
Colunas:
  - Id
  - Nome
  - Descrição
  - Preço (formatado como moeda: R$ 0,00)
  - Estoque

Botões:
  - "Editar": Carrega os dados do produto no formulário
  - "Excluir": Remove o produto do sistema


📌 ARQUIVO: ProdutosWindow.xaml.cs
─────────────────────────────────────────────────────────────────────────────

🔧 CONSTRUTOR: ProdutosWindow()
─────────────────────────────────────────────────────────────────────────────
O que faz:
  1. Inicializa os componentes
  2. Cria ProdutosViewModel
  3. Define como DataContext


═══════════════════════════════════════════════════════════════════════════════


📄 ARQUIVOS: PedidosWindow.xaml e PedidosWindow.xaml.cs
─────────────────────────────────────────────────────────────────────────────

🎯 PARA QUE SERVEM ESTES ARQUIVOS?
Estes arquivos definem a tela de LISTAGEM DE PEDIDOS.


📌 ARQUIVO: PedidosWindow.xaml
─────────────────────────────────────────────────────────────────────────────

🔧 ESTRUTURA GERAL
─────────────────────────────────────────────────────────────────────────────
Tela simples com botão e tabela.


🔧 SEÇÃO: Botão Novo Pedido
─────────────────────────────────────────────────────────────────────────────
Botão:
  - "Novo Pedido": Abre a janela para criar um pedido


🔧 SEÇÃO: Tabela de Pedidos
─────────────────────────────────────────────────────────────────────────────
Colunas:
  - Id
  - Data (formatada: dd/MM/yyyy HH:mm)
  - Cliente (nome do cliente)
  - Valor Total (formatado como moeda)

Botão:
  - "Excluir": Remove o pedido do sistema


📌 ARQUIVO: PedidosWindow.xaml.cs
─────────────────────────────────────────────────────────────────────────────

🔧 CONSTRUTOR: PedidosWindow()
─────────────────────────────────────────────────────────────────────────────
O que faz:
  1. Inicializa os componentes
  2. Cria PedidosViewModel
  3. Define como DataContext


═══════════════════════════════════════════════════════════════════════════════


📄 ARQUIVOS: PedidoWindow.xaml e PedidoWindow.xaml.cs
─────────────────────────────────────────────────────────────────────────────

🎯 PARA QUE SERVEM ESTES ARQUIVOS?
Estes arquivos definem a janela de CRIAÇÃO DE PEDIDO.


📌 ARQUIVO: PedidoWindow.xaml
─────────────────────────────────────────────────────────────────────────────

🔧 ESTRUTURA GERAL
─────────────────────────────────────────────────────────────────────────────
A janela é dividida em 3 áreas:

1. TOPO: Seleção de cliente
2. MEIO: Adição de produtos
3. BAIXO: Lista de itens e valor total


🔧 SEÇÃO: Seleção de Cliente
─────────────────────────────────────────────────────────────────────────────
Elementos:
  - ComboBox: Lista de pessoas cadastradas
  - Mostra o nome de cada pessoa

Binding:
  - Lista conectada a Pessoas no ViewModel
  - Seleção conectada a ClienteSelecionado


🔧 SEÇÃO: Adição de Produtos
─────────────────────────────────────────────────────────────────────────────
Elementos:
  - ComboBox: Lista de produtos disponíveis
  - TextBox: Quantidade
  - Botão "Adicionar Item": Adiciona o produto ao pedido

Binding:
  - Lista de produtos conectada a Produtos
  - Produto selecionado conectado a ProdutoSelecionado
  - Quantidade conectada a Quantidade


🔧 SEÇÃO: Lista de Itens do Pedido
─────────────────────────────────────────────────────────────────────────────
Colunas:
  - Produto (nome)
  - Quantidade
  - Preço Unitário (formatado como moeda)
  - Subtotal (formatado como moeda)

Botão:
  - "Remover": Remove o item do pedido

Rodapé:
  - Valor Total: Soma de todos os subtotais


🔧 SEÇÃO: Botões Finais
─────────────────────────────────────────────────────────────────────────────
Botões:
  - "Finalizar Pedido": Salva o pedido e fecha a janela
  - "Cancelar": Fecha a janela sem salvar


📌 ARQUIVO: PedidoWindow.xaml.cs
─────────────────────────────────────────────────────────────────────────────

🔧 CONSTRUTOR: PedidoWindow()
─────────────────────────────────────────────────────────────────────────────
O que faz:
  1. Inicializa os componentes
  2. Cria PedidoViewModel
  3. Define como DataContext
  4. Inscreve-se no evento RequestClose do ViewModel


🔧 MÉTODO: ViewModel_RequestClose
─────────────────────────────────────────────────────────────────────────────
Quando é chamado: Quando o ViewModel pede para fechar a janela.

O que faz:
  - Fecha a janela


═══════════════════════════════════════════════════════════════════════════════


📄 ARQUIVOS: CustomMessageBox.xaml e CustomMessageBox.xaml.cs
─────────────────────────────────────────────────────────────────────────────

🎯 PARA QUE SERVEM ESTES ARQUIVOS?
Estes arquivos definem um MODAL CUSTOMIZADO para exibir mensagens ao usuário.
Substitui o MessageBox padrão do Windows por um componente visual moderno que
segue o design do sistema.


📌 ARQUIVO: CustomMessageBox.xaml
─────────────────────────────────────────────────────────────────────────────

🔧 ESTRUTURA GERAL
─────────────────────────────────────────────────────────────────────────────
O modal é uma janela centralizada com:

1. TOPO: Barra colorida com ícone (cor varia conforme o tipo de mensagem)
2. CENTRO: Mensagem de texto
3. BAIXO: Botões de ação (OK, Sim/Não, etc)


🔧 TIPOS DE MENSAGEM
─────────────────────────────────────────────────────────────────────────────
O modal suporta 4 tipos de mensagem, cada um com sua cor característica:

1. **Information (Informação)** - Azul (#3498DB)
   - Usado para: Informações gerais, confirmações de sucesso
   - Ícone: ℹ️
   - Botão: OK

2. **Warning (Aviso)** - Laranja (#FF9800)
   - Usado para: Avisos, alertas não críticos
   - Ícone: ⚠️
   - Botão: OK

3. **Error (Erro)** - Vermelho (#E74C3C)
   - Usado para: Erros, falhas de validação
   - Ícone: ✖️
   - Botão: OK

4. **Question (Pergunta)** - Roxo (#9C27B0)
   - Usado para: Confirmações, perguntas ao usuário
   - Ícone: ❓
   - Botões: Sim e Não


📌 ARQUIVO: CustomMessageBox.xaml.cs
─────────────────────────────────────────────────────────────────────────────

🔧 ENUMERAÇÃO: MessageBoxType
─────────────────────────────────────────────────────────────────────────────
Define os tipos de mensagem disponíveis:
  - Information
  - Warning
  - Error
  - Question


🔧 ENUMERAÇÃO: MessageBoxResult
─────────────────────────────────────────────────────────────────────────────
Define os resultados possíveis:
  - OK: Usuário clicou em OK
  - Yes: Usuário clicou em Sim
  - No: Usuário clicou em Não


🔧 PROPRIEDADE: Result (MessageBoxResult)
─────────────────────────────────────────────────────────────────────────────
O que é: Armazena o resultado da interação do usuário com o modal.


🔧 CONSTRUTOR: CustomMessageBox(string message, string title, MessageBoxType type)
─────────────────────────────────────────────────────────────────────────────
Parâmetros:
  - message: Texto da mensagem a ser exibida
  - title: Título da janela
  - type: Tipo de mensagem (Information, Warning, Error, Question)

O que faz:
  1. Inicializa os componentes
  2. Define o título da janela
  3. Define a mensagem
  4. Configura a cor da barra superior conforme o tipo
  5. Configura os botões visíveis conforme o tipo


🔧 MÉTODO ESTÁTICO: Show(string message, string title, MessageBoxType type)
─────────────────────────────────────────────────────────────────────────────
Parâmetros:
  - message: Texto da mensagem
  - title: Título da janela
  - type: Tipo de mensagem

Retorna: MessageBoxResult (OK, Yes ou No)

O que faz:
  1. Cria uma nova instância de CustomMessageBox
  2. Exibe o modal de forma modal (bloqueia a janela pai)
  3. Retorna o resultado da interação do usuário

Exemplo de uso:
  var result = CustomMessageBox.Show(
      "Deseja realmente excluir este item?",
      "Confirmação",
      MessageBoxType.Question
  );
  
  if (result == MessageBoxResult.Yes)
  {
      // Usuário confirmou, executar ação
  }


🔧 MÉTODOS: OkButton_Click, YesButton_Click, NoButton_Click
─────────────────────────────────────────────────────────────────────────────
Quando são chamados: Quando o usuário clica nos respectivos botões.

O que fazem:
  1. Definem o Result apropriado (OK, Yes ou No)
  2. Fecham o modal


═══════════════════════════════════════════════════════════════════════════════
                            RESUMO DA PASTA
═══════════════════════════════════════════════════════════════════════════════

As Views são a camada de apresentação da aplicação. Elas definem COMO os dados
são exibidos e COMO o usuário interage com o sistema.

Componentes principais:
  - MainWindow: Janela principal com sistema de abas e menu lateral
  - CustomMessageBox: Modal customizado para mensagens do sistema
  - PessoasWindow: Cadastro de pessoas com busca de CEP
  - ProdutosWindow: Cadastro de produtos
  - PedidosWindow: Listagem de pedidos
  - PedidoWindow: Criação de novos pedidos

Padrão MVVM nas Views:
  - XAML: Define a aparência (declarativo, como HTML)
  - DataContext: Conecta a View ao ViewModel
  - Binding: Liga propriedades da interface a propriedades do ViewModel
  - Commands: Liga botões a métodos do ViewModel

Vantagens:
  ✓ Separação clara entre aparência e lógica
  ✓ Interface atualiza automaticamente quando os dados mudam
  ✓ Fácil de redesenhar sem mexer na lógica
  ✓ Testável (pode testar a lógica sem abrir a interface)
  ✓ Modais customizados proporcionam experiência visual consistente

Hierarquia de janelas:
  - MainWindow: Janela principal (container)
    ├─ Dashboard: Tela inicial com resumo
    ├─ PessoasWindow: Cadastro de pessoas
    ├─ ProdutosWindow: Cadastro de produtos
    └─ PedidosWindow: Lista de pedidos
       └─ PedidoWindow: Criação de pedido (janela modal)
  - CustomMessageBox: Modal para mensagens (usado em todas as telas)

Cada View é responsável APENAS pela apresentação. Toda a lógica fica nos
ViewModels, seguindo o princípio de Separação de Responsabilidades.
